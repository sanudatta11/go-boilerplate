// Code generated by MockGen. DO NOT EDIT.
// Source: ./crudDatabase.go
//
// Generated by this command:
//
//	mockgen -source=./crudDatabase.go -destination=../mocks/crudDatabase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	models "boilerplate/models"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseLayer is a mock of DatabaseLayer interface.
type MockDatabaseLayer struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseLayerMockRecorder
}

// MockDatabaseLayerMockRecorder is the mock recorder for MockDatabaseLayer.
type MockDatabaseLayerMockRecorder struct {
	mock *MockDatabaseLayer
}

// NewMockDatabaseLayer creates a new mock instance.
func NewMockDatabaseLayer(ctrl *gomock.Controller) *MockDatabaseLayer {
	mock := &MockDatabaseLayer{ctrl: ctrl}
	mock.recorder = &MockDatabaseLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseLayer) EXPECT() *MockDatabaseLayerMockRecorder {
	return m.recorder
}

// GetUserData mocks base method.
func (m *MockDatabaseLayer) GetUserData(ctx *gin.Context, tableName, identifier string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, tableName, identifier)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockDatabaseLayerMockRecorder) GetUserData(ctx, tableName, identifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockDatabaseLayer)(nil).GetUserData), ctx, tableName, identifier)
}
